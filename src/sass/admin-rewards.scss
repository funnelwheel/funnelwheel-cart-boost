@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/maps";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/utilities";

button {
	padding: 8px 16px;
	margin: auto 2px;
	border-radius: 50px;
	cursor: pointer;
	border: none;
	background-color: #ffffff;
}

.components-base-control__label {
	width: 200px;
}

.growcart-rewards,
.RulesList {
	input {
		width: $form-check-input-width;
		height: $form-check-input-width;
		margin-top: ($line-height-base - $form-check-input-width) * 0.5; // line-height minus check height
		vertical-align: top;
		background-color: $form-check-input-bg;
		background-repeat: no-repeat;
		background-position: center;
		background-size: contain;
		border: $form-check-input-border;
		appearance: none;
		print-color-adjust: exact; // Keep themed appearance for print
		@include transition($form-check-transition);

		&[type="checkbox"] {
			@include border-radius($form-check-input-border-radius);
		}

		&[type="radio"] {
			// stylelint-disable-next-line property-disallowed-list
			border-radius: $form-check-radio-border-radius;
		}

		&:active {
			filter: $form-check-input-active-filter;
		}

		&:focus {
			border-color: $form-check-input-focus-border;
			outline: 0;
			box-shadow: $form-check-input-focus-box-shadow;
		}

		&:checked {
			background-color: $form-check-input-checked-bg-color;
			border-color: $form-check-input-checked-border-color;

			&[type="checkbox"] {
				@if $enable-gradients {
					background-image: escape-svg(
							$form-check-input-checked-bg-image
						),
						var(--#{$prefix}gradient);
				} @else {
					background-image: escape-svg(
						$form-check-input-checked-bg-image
					);
				}
			}

			&[type="radio"] {
				@if $enable-gradients {
					background-image: escape-svg(
							$form-check-radio-checked-bg-image
						),
						var(--#{$prefix}gradient);
				} @else {
					background-image: escape-svg(
						$form-check-radio-checked-bg-image
					);
				}
			}
		}

		&[type="checkbox"]:indeterminate {
			background-color: $form-check-input-indeterminate-bg-color;
			border-color: $form-check-input-indeterminate-border-color;

			@if $enable-gradients {
				background-image: escape-svg(
						$form-check-input-indeterminate-bg-image
					),
					var(--#{$prefix}gradient);
			} @else {
				background-image: escape-svg(
					$form-check-input-indeterminate-bg-image
				);
			}
		}

		&:disabled {
			pointer-events: none;
			filter: none;
			opacity: $form-check-input-disabled-opacity;
		}

		// Use disabled attribute in addition of :disabled pseudo-class
		// See: https://github.com/twbs/bootstrap/issues/28247
		&[disabled],
		&:disabled {
			~ .form-check-label {
				cursor: default;
				opacity: $form-check-label-disabled-opacity;
			}
		}
	}

	input[type="checkbox"]:checked::before {
		content: "";
	}

	.components-form-toggle {
		padding-left: $form-switch-padding-start;

		input {
			width: $form-switch-width;
			margin-left: $form-switch-padding-start * -1;
			background-image: escape-svg($form-switch-bg-image);
			background-position: left center;
			@include border-radius($form-switch-border-radius);
			@include transition($form-switch-transition);

			&:focus {
				background-image: escape-svg($form-switch-focus-bg-image);
			}

			&:checked {
				background-position: $form-switch-checked-bg-position;

				@if $enable-gradients {
					background-image: escape-svg($form-switch-checked-bg-image),
						var(--#{$prefix}gradient);
				} @else {
					background-image: escape-svg($form-switch-checked-bg-image);
				}
			}
		}
	}
}

.growcart-rewards {
	border-collapse: collapse;
	width: 100%;
	-webkit-box-shadow: 0px 5px 12px -12px rgba(0, 0, 0, 0.29);
	-moz-box-shadow: 0px 5px 12px -12px rgba(0, 0, 0, 0.29);
	box-shadow: 0px 5px 12px -12px rgba(0, 0, 0, 0.29);
	thead {
		th {
			border: none;
			padding: 15px 30px;
			font-size: 13px;
			font-weight: 500;
			color: lighten($black, 50%);
		}
		tr {
			background: $white;
			border-bottom: 4px solid darken(#f8f9fd, 3%);
		}
	}
	tbody {
		tr {
			margin-bottom: 10px;
			border-bottom: 4px solid #f8f9fd;
			&:last-child() {
				border-bottom: 0;
			}
		}
		th,
		td {
			border: none;
			padding: 15px 30px;
			font-size: 14px;
			background: $white;
			vertical-align: middle;
		}
		td {
			&.status {
				span {
					position: relative;
					border-radius: 30px;
					padding: 4px 10px 4px 25px;
					&:after {
						position: absolute;
						top: 9px;
						left: 10px;
						width: 10px;
						height: 10px;
						content: "";
						border-radius: 50%;
					}
				}
				.active {
					background: lighten($success, 25%);
					color: darken($success, 25%);
					&:after {
						background: darken($success, 20%);
					}
				}
				.waiting {
					background: lighten($warning, 25%);
					color: darken($warning, 25%);
					&:after {
						background: darken($warning, 15%);
					}
				}
			}
			.img {
				width: 50px;
				height: 50px;
				border-radius: 50%;
			}
			.email {
				span {
					display: block;
					&:last-child() {
						font-size: 12px;
						color: rgba(0, 0, 0, 0.3);
					}
				}
			}
			.close {
				span {
					font-size: 12px;
					color: $danger;
				}
			}
		}
	}
}

.RewardsListItem {
	*,
	*::before,
	*::after {
		box-sizing: border-box;
	}

	&__back {
		margin-bottom: 16px;
	}

	&__row {
		@include make-row();
	}

	&__col-rules,
	&__col-preview {
		@include make-col-ready();
	}

	&__col-rules {
		@include make-col(4);
	}

	&__col-preview {
		@include make-col(8);
	}

	&__type {
		margin-bottom: 16px;
		padding: 24px;
		border-radius: 4px;
		background-color: #ffffff;
	}
}

.RulesList {
	&__top {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}
}

.RulesListItem {
	margin-bottom: 8px;
	padding: 24px;
	border-radius: 4px;
	background-color: #ffffff;

	input[type="text"] {
		width: 100%;
	}

	&__actions {
		display: flex;
		align-items: center;
		justify-content: flex-end;

		button[type="button"] {
			margin-bottom: 8px;
		}
	}
}

.RewardsListItemAdd {
	&__back {
		margin-bottom: 16px;
	}

	&__body {
		margin-bottom: 16px;
		padding: 24px;
		border-radius: 4px;
		background-color: #ffffff;
	}

	.components-text-control__input {
		width: 100%;
	}
}
